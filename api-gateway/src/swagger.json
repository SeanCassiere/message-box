{
  "openapi": "3.0.0",
  "info": {
    "title": "MessageBox API Gateway",
    "description": "&nbsp;\n## Welcome\nThis is the MessageBox API-Gateway to interact with its' backend micro-services.\n\n## Login\nTo login, use the `/POST -> /Api/Authentication/Login` endpoint with user credentials to be hinted on the next step.\n\n&nbsp;\n## Using the fetched Access Token\nAccess tokens returned by the MessageBox Auth Service via the ***Login*** or ***Refresh*** routes are formatted as a JSON Web Token (JWT).\n\nThe decoded the JWT body contains the **message_box_userId**, **message_box_clientId**, and token permissions are listed.\n\n&nbsp;\n\nTo use the access token, append it to the request headers in the following format.\n```sh\n\n Base URL: /Api\n\n HTTP headers:\n    Authorization: Bearer [access_token]\n\n```\n\n&nbsp;\n",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "externalDocs": {
    "description": "Visit the MessageBox web application",
    "url": "https://message-box.netlify.app/"
  },
  "servers": [
    {
      "url": "https://web4000.localhost/Api",
      "description": "Development server with SSL",
      "variables": {}
    },
    {
      "url": "http://localhost:4000/Api",
      "description": "Development server",
      "variables": {}
    }
  ],
  "tags": [
    {
      "name": "Authentication",
      "description": "MessageBox authentication-related endpoints"
    },
    {
      "name": "CalendarEvent",
      "description": "endpoints relating to calendar events"
    },
    {
      "name": "Client",
      "description": "endpoints relating to clients"
    },
    {
      "name": "Report",
      "description": "endpoints relating to the running system reports"
    },
    {
      "name": "Role",
      "description": "endpoints relating to the user roles"
    },
    {
      "name": "Task",
      "description": "endpoints relating to the user tasks"
    },
    {
      "name": "Team",
      "description": "endpoints relating to the user teams"
    },
    {
      "name": "User",
      "description": "endpoints relating to Users"
    }
  ],
  "paths": {
    "/Authentication/Login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Sign-in to create an access token",
        "description": "Sign-in and fetch an access token.",
        "operationId": "LoginUser",
        "requestBody": {
          "description": "Login a user",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "default": "msc@msc.com"
                  },
                  "password": {
                    "type": "string",
                    "default": "123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully logged in as a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/2FAUsernameAndPasswordLogin"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": []
      }
    },
    "/Authentication/Login/Passwordless": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Check if the user can login using a passwordless method",
        "description": "Check if the user can login using a passwordless method.",
        "operationId": "GetAccountPasswordlessStatusByEmail",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "User account email (e.g. `msc@msc.com`)",
            "schema": {
              "type": "string",
              "format": "email"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "If the user can login using a password less method, the userId (UUID) will be returned in the body.<br />If the user does not exist, `null` will be returned for the userId. If account has not been setup, a HTTP Status Code of `400` will be returned with the validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "userId": {
                      "type": "string",
                      "format": "uuid",
                      "nullable": true
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "post": {
        "tags": ["Authentication"],
        "summary": "Request a one-time passwordless login pin to be sent",
        "description": "If the user does not want to enter their TOTP generated from their authenticator app, they may request a one-time PIN to be sent to them using a supported method.",
        "operationId": "RequestPasswordlessPin",
        "requestBody": {
          "description": "Method of sending the one-time pin, and the userId of the user.<br /><br />Supported methods are: <br /><ul><li>email</li></ul>",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "method": {
                    "type": "string",
                    "default": "email"
                  },
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully sent the one-time PIN to the user via the method specified in the request body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": []
      }
    },
    "/Authentication/Login/Refresh": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Refresh the users's access token",
        "description": "Generate a new access token for the user based on the cookies.",
        "operationId": "LoginRefreshUser",
        "responses": {
          "200": {
            "description": "This method will always return with the status code of 200.<br /><br />***access_token*** will be ***null*** if the cookie is not available or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenSchema"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/Authentication/2FA/Code/Login": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Get access token using 2FA code and the user's id",
        "description": "Get access token using 2FA code and the user's id",
        "operationId": "2FACodeLogin",
        "requestBody": {
          "description": "Get access token using 2FA code",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "code": {
                    "type": "string",
                    "default": "123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully logged in as a user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessTokenSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": []
      }
    },
    "/Authentication/2FA/Code/ConfirmUser": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Confirm the user's 2FA account status using the code and the userId",
        "description": "Confirm the user's 2FA account status using the code and the userId",
        "operationId": "2FAValidateAccountCode",
        "requestBody": {
          "description": "Get access token using 2FA code",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "code": {
                    "type": "string",
                    "default": "123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully validated the user's 2FA status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "parameters": []
      }
    },
    "/Authentication/Logout": {
      "get": {
        "tags": ["Authentication"],
        "summary": "Sign-out route for user",
        "description": "Sign-out the user and clear cookies.",
        "operationId": "LogoutUser",
        "responses": {
          "200": {
            "description": "Successfully logged out the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          }
        },
        "parameters": []
      }
    },
    "/CalendarEvent": {
      "get": {
        "tags": ["CalendarEvent"],
        "summary": "Get calendar events for the user",
        "description": "Get calendar events for the user.",
        "operationId": "GetCalendarEventsForUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "description": "Start of the date range in ISO 8601 date format (e.g. `2022-01-01T00:00:00.000Z`)",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "Start of the date range in ISO 8601 date format (e.g. `2022-01-01T00:00:00.000Z`)",
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "required": true
          },
          {
            "name": "ownerId",
            "in": "query",
            "description": "Owner ID (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully fetched all the calendar events for the user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CalendarEventSchema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["CalendarEvent"],
        "summary": "Create a calendar event for the user",
        "description": "Create a calendar event for the user.",
        "operationId": "CreateCalendarEventForUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Details required to create a calendar event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully created a new calendar event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": []
      }
    },
    "/CalendarEvent/{id}": {
      "get": {
        "tags": ["CalendarEvent"],
        "summary": "Get a calendar event by its Event Id",
        "description": "Get a calendar event by its Event Id",
        "operationId": "GetCalendarEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Calendar Event ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full calendar event details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "tags": ["CalendarEvent"],
        "summary": "Update a calendar event details by its Event Id",
        "description": "Update a calendar event details by its Event Id",
        "operationId": "UpdateCalendarEventById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Details required to update a calendar event.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalendarEventSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully created a new calendar event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalendarEventSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": []
      },
      "patch": {
        "tags": ["CalendarEvent"],
        "summary": "Patch a calendar event details by its Event Id",
        "description": "Patch a calendar event details by its Event Id",
        "operationId": "PatchCalendarEventById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Details required to patch a calendar event.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "startDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "date-time"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully created a new calendar event",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": []
      },
      "delete": {
        "tags": ["CalendarEvent"],
        "summary": "Delete a calendar event by its Event Id",
        "description": "Delete a calendar event by its Event Id",
        "operationId": "DeleteCalendarEventById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Calendar Event ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Clients": {
      "get": {
        "tags": ["Client"],
        "summary": "Get all clients",
        "description": "Get all the clients.",
        "operationId": "GetAllClients",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All clients in the system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ClientSchema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["Client"],
        "summary": "Register a new client and admin user",
        "description": "Register a new client and register the initial admin user.",
        "operationId": "CreateClientAndUser",
        "security": [],
        "requestBody": {
          "description": "Client and User information required to create and register a client.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "default": "https://example.com"
                  },
                  "path": {
                    "type": "string",
                    "default": "/confirm-account/"
                  },
                  "client": {
                    "type": "object",
                    "properties": {
                      "clientName": {
                        "type": "string"
                      }
                    }
                  },
                  "user": {
                    "type": "object",
                    "properties": {
                      "email": {
                        "type": "string",
                        "format": "email"
                      },
                      "firstName": {
                        "type": "string"
                      },
                      "lastName": {
                        "type": "string"
                      },
                      "password": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully registered a new client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": []
      }
    },
    "/Clients/Profile": {
      "get": {
        "tags": ["Client"],
        "summary": "Get the logged-in client's profile",
        "description": "Get the logged-in client's profile.",
        "operationId": "GetClientProfile",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the client profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "tags": ["Client"],
        "summary": "Update the logged-in client's profile",
        "description": "Update the company details.",
        "operationId": "UpdateClientProfile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Client data required to update a client.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClientSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "All roles available to the client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClientSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        }
      }
    },
    "/Clients/Roles": {
      "get": {
        "tags": ["Client", "Role"],
        "summary": "Get all roles for logged-in client",
        "description": "Get all the available roles for the logged-in client.",
        "operationId": "GetAllRolesForClient",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All roles available to the client",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoleSchema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["Client", "Role"],
        "summary": "Create a new role for the logged-in client",
        "description": "Create a new role for the logged-in client.",
        "operationId": "ClientCreateNewRole",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Data required to create a new user role.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rootName": {
                    "type": "string"
                  },
                  "viewName": {
                    "type": "string"
                  },
                  "permissions": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "default": ["user:read", "user:create", "user:update", "user:delete"]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully create a new role for the client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": []
      }
    },
    "/Clients/Teams": {
      "get": {
        "tags": ["Client", "Team"],
        "summary": "Get all teams for logged-in client",
        "description": "Get all the available teams for the logged-in client.",
        "operationId": "GetAllTeamsForClient",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All teams available to the client",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TeamSchema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["Client", "Team"],
        "summary": "Create a new team for the logged-in client",
        "description": "Create a new team for the logged-in client.",
        "operationId": "ClientCreateNewTeam",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Data required to create a new user team.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "rootName": {
                    "type": "string"
                  },
                  "teamName": {
                    "type": "string"
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "userId": {
                          "type": "string",
                          "format": "uuid"
                        },
                        "isLeader": {
                          "type": "boolean",
                          "default": false
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully create a new role for the client",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": []
      }
    },
    "/Clients/Users": {
      "get": {
        "tags": ["Client", "User"],
        "summary": "Get all users for client",
        "description": "Get all the users for client.",
        "operationId": "GetAllUsers",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "Search from firstName, lastName and email",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Change page based on pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Return users pageSize",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sorting order of the Id",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          },
          {
            "name": "roleId",
            "in": "query",
            "description": "Specific available user role",
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All users in the system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSchema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["Client"],
        "summary": "Signed-in user to create new user for client",
        "description": "Signed-in user to create new user for client.",
        "operationId": "ClientCreateUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Personal data required to register a user.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "default": "https://example.com"
                  },
                  "path": {
                    "type": "string",
                    "default": "/confirm-account/"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successfully registered user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "x-codegen-request-body-name": "body",
        "parameters": []
      }
    },
    "/Clients/Users/Online": {
      "get": {
        "tags": ["Client", "User"],
        "summary": "Get a list of the online users for the client",
        "description": "Get a list of the online users for the client.",
        "operationId": "GetAllOnlineUsers",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All users in the system",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOnlineStatusSchema"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Reports": {
      "get": {
        "tags": ["Report"],
        "summary": "Get all the reports for a user",
        "description": "Get all the reports for a user",
        "operationId": "GetReports",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All the reports for a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReportSchema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Roles/Permissions": {
      "get": {
        "tags": ["Role"],
        "summary": "Get all permissions that can be assigned to a role",
        "description": "Get all permissions that can be assigned to a role",
        "operationId": "GetAllAvailableRolePermissions",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All permissions assignable to a role",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "default": ["user:read", "user:create", "user:read", "user:delete"]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Roles/{id}": {
      "get": {
        "tags": ["Role"],
        "summary": "Get the specific details by the role ID",
        "description": "Get all the details about the role by the role ID",
        "operationId": "GetRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Role ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full role details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "tags": ["Role"],
        "summary": "Update the role by the ID",
        "description": "Update the role by the ID",
        "operationId": "UpdateRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Role ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Personal data required to register a user.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoleSchema"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full role details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoleSchema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Role"],
        "summary": "Delete a role by its role ID",
        "description": "Delete a role and it's user mappings by the role ID",
        "operationId": "DeleteRoleById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Role ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full role details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Tasks": {
      "get": {
        "tags": ["Task"],
        "summary": "Get all the tasks for a user",
        "description": "Get all the tasks for a user",
        "operationId": "GetTasks",
        "parameters": [
          {
            "name": "ownerId",
            "in": "query",
            "description": "Owner ID (UUID)",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "currentDate",
            "in": "query",
            "description": "The current date in `YYYY-MM-DD` format",
            "schema": {
              "type": "string",
              "format": "date",
              "default": "2022-02-20"
            },
            "required": true
          },
          {
            "name": "for",
            "in": "query",
            "description": "***Today, Overdue, Tomorrow, Completed***",
            "schema": {
              "type": "string",
              "default": "Today"
            },
            "required": true
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "All the tasks for a user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskSchema"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": ["Task"],
        "summary": "Create a new task",
        "description": "Create a new task for a user",
        "operationId": "CreateTask",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "New task details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Newly created task",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Tasks/{id}": {
      "get": {
        "tags": ["Task"],
        "summary": "Get a task by it's task ID",
        "description": "Get a task by it's task ID",
        "operationId": "GetTaskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Team ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "tags": ["Task"],
        "summary": "Update task by it's task ID",
        "description": "Update task by it's task ID",
        "operationId": "UpdateTaskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Team ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Update task details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TaskSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated task details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Task"],
        "summary": "Delete a task by it's task ID",
        "description": "Delete a task and it's user mappings by the task ID",
        "operationId": "DeleteTaskById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Team ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Teams/{id}": {
      "get": {
        "tags": ["Team"],
        "summary": "Get the specific details by the team ID",
        "description": "Get all the details about the team by the team ID",
        "operationId": "GetTeamById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Team ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "tags": ["Team"],
        "summary": "Update the team by the team ID",
        "description": "Update the team by the ID",
        "operationId": "UpdateTeamById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Team ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Details required to update a team.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TeamSchema"
              }
            }
          },
          "required": true
        },
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Full team details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TeamSchema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": ["Team"],
        "summary": "Delete a team by its team ID",
        "description": "Delete a team and it's user mappings by the team ID",
        "operationId": "DeleteTeamById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique Team ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Operation status",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/Users/{id}": {
      "get": {
        "tags": ["User"],
        "summary": "Get user by the user ID",
        "description": "Get user details by their user ID",
        "operationId": "GetUserById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's unique ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched the user's details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user by the user ID",
        "description": "Update the user details by the their ID",
        "operationId": "UpdateUserById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's unique ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Updated user details",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      },
      "delete": {
        "tags": ["User"],
        "summary": "Delete user by the user ID",
        "description": "Delete a user by their user ID<br /><br />The initial delete is a soft delete, which the user being set to inactive and the email being randomized.<br />A second subsequent request will perform a permanent deletion from the database.",
        "operationId": "DeleteUserById",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's unique ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/BadRequest"
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/{id}/ChangePassword": {
      "post": {
        "tags": ["User"],
        "summary": "Change user's password",
        "description": "Change a user's password.",
        "operationId": "ChangeUserPasswordById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User's unique ID (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "New password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/ConfirmUser": {
      "post": {
        "tags": ["User"],
        "summary": "Confirm the user account using the token sent via email",
        "description": "Confirm the user account using the token sent via email.",
        "operationId": "ConfirmUserWithEmailToken",
        "parameters": [],
        "requestBody": {
          "description": "Body required to change the user's password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully changed the user's password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/ConfirmUser/ResendConfirmationEmail": {
      "post": {
        "tags": ["User"],
        "summary": "Resend the account confirmation email",
        "description": "Resend the account confirmation email.",
        "operationId": "ResendConfirmationEmail",
        "parameters": [],
        "requestBody": {
          "description": "Body required to change the user's password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "default": "https://example.com"
                  },
                  "path": {
                    "type": "string",
                    "default": "/confirm-account/"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "default": "msc@msc.com"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully resent the account confirmation email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/Reset2FA/RequestEmail": {
      "post": {
        "tags": ["User"],
        "summary": "Request an email to reset a user's 2fa access",
        "description": "Request an email to reset the user's 2fa access.",
        "operationId": "Request2FAResetWithEmail",
        "parameters": [],
        "requestBody": {
          "description": "Body required to request a 2FA reset",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "default": "https://example.com"
                  },
                  "path": {
                    "type": "string",
                    "default": "/reset-2fa/"
                  },
                  "userId": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully send the reset email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/Reset2FA/{token}": {
      "get": {
        "tags": ["User"],
        "summary": "Get the 2FA reset details for the token",
        "description": "Get the 2FA reset details for the token",
        "operationId": "Get2faResetByToken",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "Reset token (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched reset 2fa details for the token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/2FAUsernameAndPasswordLogin"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/ResetPassword/RequestEmail": {
      "post": {
        "tags": ["User"],
        "summary": "Request an email to reset the user password",
        "description": "Request an email to reset the user password.",
        "operationId": "RequestPasswordResetWithEmail",
        "parameters": [],
        "requestBody": {
          "description": "Body required to change the user's password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "host": {
                    "type": "string",
                    "default": "https://example.com"
                  },
                  "path": {
                    "type": "string",
                    "default": "/forgot-password/"
                  },
                  "email": {
                    "type": "string",
                    "format": "email",
                    "default": "msc@msc.com"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully changed the user's password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/ResetPassword/With2FA": {
      "post": {
        "tags": ["User"],
        "summary": "Change the user's password using the 2FA code",
        "description": "Change the user's password using the 2FA code.",
        "operationId": "ChangePasswordWith2FA",
        "parameters": [],
        "requestBody": {
          "description": "Body required to change the user's password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "default": "msc@msc.com"
                  },
                  "password": {
                    "type": "string",
                    "default": "123"
                  },
                  "code": {
                    "type": "string",
                    "default": "123456"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully changed the user's password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/ResetPassword/WithToken": {
      "post": {
        "tags": ["User"],
        "summary": "Change the user's password using a token",
        "description": "Change the user's password using a token.",
        "operationId": "ChangePasswordWithToken",
        "parameters": [],
        "requestBody": {
          "description": "Body required to change the user's password",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "password": {
                    "type": "string",
                    "default": "123"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully changed the user's password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/Profile": {
      "get": {
        "tags": ["User"],
        "summary": "Get the logged-in user's details",
        "description": "Get the logged-in user's details.",
        "operationId": "GetLoggedInUserProfile",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Logged-in user profile details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "put": {
        "tags": ["User"],
        "summary": "Update user the logged-in user profile",
        "description": "Update the logged-in user",
        "operationId": "UpdateLoggedInUserProfile",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Updated user details",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email"
                  },
                  "firstName": {
                    "type": "string"
                  },
                  "lastName": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSchema"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    },
    "/Users/Profile/ChangePassword": {
      "post": {
        "tags": ["User"],
        "summary": "Change the logged-in user's password",
        "description": "Change the logged-in user's password.",
        "operationId": "ChangeLoggedInUserPassword",
        "parameters": [],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Change password details",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated the user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessagePair"
                }
              }
            }
          },
          "403": {
            "$ref": "#/components/responses/BadRequest"
          }
        }
      }
    }
  },
  "components": {
    "responses": {
      "NotFound": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "UnauthorizedError": {
        "description": "Access token is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "BadRequest": {
        "description": "Failed validation on the server",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/FieldValidationError"
            }
          }
        }
      }
    },
    "schemas": {
      "FieldValidationError": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "nullable": true
          },
          "errors": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string"
                },
                "propertyPath": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "SortDirection": {
        "type": "string",
        "enum": ["ASC", "DESC"]
      },
      "SuccessMessagePair": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "default": true
          },
          "message": {
            "type": "string",
            "default": "Status of the request/operation"
          }
        }
      },
      "2FAUsernameAndPasswordLogin": {
        "type": "object",
        "properties": {
          "next": {
            "type": "string",
            "default": "Next endpoint to be accessed based on the user's 2fa status"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "twoFactorAuthenticationCodeCreator": {
            "type": "object",
            "nullable": true,
            "properties": {
              "base32": {
                "type": "string",
                "default": "Base32 encoded secret"
              },
              "otpauth_url": {
                "type": "string",
                "default": "URL to the QR code"
              }
            }
          }
        }
      },
      "AccessTokenSchema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "default": "Message on the operation status"
          },
          "access_token": {
            "type": "string",
            "default": "JWT Bearer Access Token"
          },
          "expiresIn": {
            "type": "number",
            "default": 6000
          }
        }
      },
      "UserSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "isActive": {
            "type": "boolean",
            "default": false
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "UserOnlineStatusSchema": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "default": "Online"
          }
        }
      },
      "ClientSchema": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "format": "uuid"
          },
          "clientName": {
            "type": "string"
          },
          "adminUserId": {
            "type": "string",
            "format": "uuid"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "RoleSchema": {
        "type": "object",
        "properties": {
          "roleId": {
            "type": "string",
            "format": "uuid"
          },
          "rootName": {
            "type": "string"
          },
          "viewName": {
            "type": "string"
          },
          "permissions": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "default": ["user:read", "user:create", "user:read", "user:delete"]
          },
          "isUserDeletable": {
            "type": "boolean",
            "default": false
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TaskSchema": {
        "type": "object",
        "properties": {
          "taskId": {
            "type": "string",
            "format": "uuid"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "sharedWith": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "bgColor": {
            "type": "string",
            "default": "#009688"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isCompleted": {
            "type": "boolean",
            "default": false
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "TeamSchema": {
        "type": "object",
        "properties": {
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "rootName": {
            "type": "string"
          },
          "teamName": {
            "type": "string"
          },
          "isUserDeletable": {
            "type": "boolean",
            "default": false
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "format": "uuid"
                },
                "isLeader": {
                  "type": "boolean",
                  "default": false
                },
                "firstName": {
                  "type": "string",
                  "nullable": true
                },
                "lastName": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CalendarEventSchema": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "uuid"
          },
          "ownerId": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "isAllDay": {
            "type": "boolean",
            "default": false
          },
          "sharedWith": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "userId": {
                  "type": "string",
                  "format": "uuid"
                },
                "name": {
                  "type": "string",
                  "nullable": true
                }
              }
            }
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ReportSchema": {
        "type": "object",
        "properties": {
          "reportId": {
            "type": "string"
          },
          "reportName": {
            "type": "string"
          },
          "procedureName": {
            "type": "string"
          },
          "searchField": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fieldName": {
                  "type": "string"
                },
                "fieldType": {
                  "type": "string"
                },
                "defaultValue": {
                  "type": "string"
                },
                "options": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "label": {
                        "type": "string"
                      },
                      "value": {
                        "type": "string"
                      }
                    }
                  }
                },
                "mandatory": {
                  "type": "boolean",
                  "default": false
                },
                "visible": {
                  "type": "boolean",
                  "default": true
                },
                "hidden": {
                  "type": "boolean",
                  "default": false
                }
              }
            }
          },
          "reportField": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "fieldName": {
                  "type": "string"
                },
                "fieldType": {
                  "type": "string"
                },
                "visible": {
                  "type": "boolean",
                  "default": true
                }
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "links": {},
    "callbacks": {}
  },
  "security": []
}
